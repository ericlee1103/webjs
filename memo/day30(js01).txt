day30(javascript 1일차)
자바스크립트 -> js 환경구축 -> 자바스크립트 기본문법 -> 변수 -> 형변환 -> 연산자 -> 제어문 -> 프로그래밍 패러다임

1. 자바스크립트(JS : JavaScript)
	객체 기반의 스크립트 언어
	html 웹의 구조(내용), css 웹 디자인, js로 웹의 동작을 구현
	컴파일 과정이 없이 브라우저 내부의 자바스크립트 처리기(인터프리터)에 의해 바로 실행된다
	※ 개발환경이 발전함에 따라 컴파일 과정이 가능해졌으며 node, js로 서버 환경을 구축한다
	
	자바스크립트 --- 인터프리터 --- 컴퓨터
	웹 브라우저에는 자바스크립트 소스를 읽고 처리하는 해석기(JavaScript Interpreter)가 있다
	자바스크립트 소스는 웹 문서(.html)에서 <script>태그를 이용해 작성할 수 있다
	css처럼 소스만 별도 스크립트 파일로 작성 후 웹 문서와 연결해서 사용할 수 있다
	
1) 자바스크립트 역사
	1995년 넷스케이프사 브렌던아이크가 개발
	모카 -> 라이브 스크립트 -> 자바스크립트
	웹 패이지의 보조적인 기능을 수행하기 위해 한정적인 용도로 사용됨
	이 시기에 대부분의 로직은 웹서버에 실행되고 브라우저는 전달받은 HTML과 CSS를 단순히 렌더링하는 수준
	(렌더링 : html, css, javascript로 작성된 문서를 해석해서 브라우저에서 시각적으로 출력하는 것을 의미
		/ 서버에서 데이터를 HTML로 변환해서 브라우저에 전달하는 과정(SSR : Server Side Rendering)을 가리키기도 함)

2) 자바스크립트의 특징
	- 퍼즐 조각처럼 코드형태로 HTML 페이지에 내장된다
	- 컴파일 과정이 없이 브라우저 내부의 자바스크립트 처리기에 의해 바로 실행된다

	   [index.html]      [브라우저]
   	<script>
   	자바스크립트 코드 -   >   인터프리터 -> 결과출력
   	</script>

3) 자바와 자바스크립트
	직접적인 관련은 없음
	문법상 비슷한 부분은 C언어를 기반으로 만들어졌기 때문

	자바			자바스크립트
	컴파일언어			인터프리터언어
	타입검사를 엄격하게함	타입을 명시하지 않음
	자료형 변수명 = 값;		let 변수명 = 값;
	클래스 기반의 객체지향언어	프로토타입 기반의 객체지향언어

+) 프로그래밍 언어의 역사
	계산의 자동화
	
(1) C언어 이전(1940년대~1960년대)
	1940s	기계어		0과 1의 조합
	1950	어셈블리어		기계어의 Mnemonic버전, CPU 다름
	1957	FORTRAN		최초의 고급언어, 과학/수학 게산용
	1958	lISP		인공지능 연구에 사용된 함수형 언어	
	1959	COBOL		비즈니스용 언어, 자연어에 가까운 문법
	
(2) C언어의 탄생과 영향(1970년대)
	1970	Pascal		교육용 언어로 널리쓰임
	1972	C언어		유닉스 os 개발에 사용됨, 하드웨어에 가깝지만 이식성 있음
	1978	BASIC		초등/중등 교육에서 사용됨
	-> c언어는 이후에 개발된 대부분의 언어에 문법적/구조적 기반을 제공함

(3) 객체지향언어의 등장(1980년대)
	1980	Smalltalk		객체지향프로그래밍의 선구자
	1983	C++		C언어 + 객체지향
	1987	Perl		텍스트처리 강력, 스크립트 언어의 효시
	1984	Objective-C	Smalltalk의 객체지향 + c. ios/macos에서 사용됨
	
(4) 웹 플랫폼 확장(1990년대)
	1991 Python		간결하고 직관적인 문법
	1991 Visual Basic  		GUI 프로그래밍을 쉽게 작성, 마이크로소프트 주도
	1995 Java			객체지향, 플랫폼 독립성
	1995 JavaScript		웹 브라우저용 스크립트 언어, 인터렉티브 웹 구현
	1995 PHP			동적 웹페이즈를 위한 서버측 언어
	-> Java는 기업용시스템, JavaScript는 웹 브라우저 중심으로 성장

------------------------------------------------------------------------------
4) 웹 페이지에서 자바스크립트의 역할
	웹페이지는 html, css, js 3가지 코드가 결합되어 작성된다
	자바스크립트는 사용자의 입력을 처리하거나 웹 어플리케이션을 작성하는 등 웹페이지의 동적 제어에 사용된다

- 사용자의 입력, 계산
	HTML 폼은 입력창만 제공
	KEY, MOUSE의 입력과 계산은 오직 자바스크립트로만 처리가 가능함
	
- 웹 페이지 내용 및 모양의 동적 제어
	HTML 태그의 속성이나 콘텐츠, CSS속성값을 변경하여 웹 페이지에 동적인 변화를 일으키는데에 활용됨

- 브라우저 제어
	브라우저 윈도우의 크기나 모양변경, 새윈도우나 탭열기, 다른 웹 사이트 접속, 브라우저 히스토리 제어 등
	브라우저 작동을 제어하는데 활용됨
	
- 웹 서버와의 통신(Ajax 등)
	웹 페이지가 웹 서버와 데이터를 주고받을 때 활용된다
	웹 페이지가 웹 서버와 데이터를 주고받을 때 활용한다
	장점 : 웹페이지의 반응성 향상, 효율적인 데이터 전송, 사용자와 상호작용 할 수 있는 다양한 기능

- 웹 어플리케이션 작성(API)
	자바스크립트 언어로 활용할 수 있는 많은 API를 제공하므로
	웹 브라우저에서 실행되는 다양한 어플리케이션을 개발할 수 있다

2. JS 환경 구축
1) Node.js
	크롬 v8 Javascript 엔진으로 빌드된 javascript 런타임
	javascript로 작성된 프로그램을 일반 어플리케이션 프로그램처럼 실행시켜주는 런타임이다
	
	2009년 라이언 달이 발표
	브라우저에서만 동작하던 자바스크립트를 브라우저 이외의 환경에서 동작시킬 수 있는 자바스크립트 실행환경
	npm(node package manager) : 자바스크립트 패키지 매니저
		node.ks에서 사용할 수 있는 모듈들을 패키지화해서 모아둔 저장소 역할과 패키지 설치 및 관리를 위한 CLI를 제공함

2) Node.js 설치
	LTS 버전으로 설치 진행
	windows installer(.msi)로 설치 진행(경로만 C:nodejs/ 로 변경 후 설치, 체크박스 체크 해제)
	
	설치가 잘 되었는지 확인
	cmd > node -v 버전 확인
	cmd > npm -v 버전 확인
	
3) Node.js 사용 이유
	javascript는 스크립트 언어기 때문에 단독적으로 실행이 불가능하다
	특정 프로그램 안에서만 동작하기 때문에 웹 브라우저가 없다면 자바스크립트를 사용할 수 없다
	node.js는 자바스크립트를 웹 브라우저에서 독립시켜서 node.js 터미널 프로그램에서 웹 브라우저 없이 자바스크립트를 실행할 수 있도록 한다
	node.js를 통해 javascript라는 하나의 언어로 서버도 만들 수 있다

4) VS CODE 확장 프로그램
	code runner 설치 후 test.js 파일 만든 뒤
	console.log("hello");
	console.log("안녕");
	실행(ctrl + alt + n)
	아래 콘솔 결과 나오는 것 확인 가능
	한글이 깨지거나 안보이면 vs code 열려있는 창 모두 닫고 cs code 재시작
	그래도 안되면 컴퓨터 재부팅

3. 자바스크립트를 작성할 수 있는 위치
1) html 태그의 이벤트 리스너 속성에 작성
	html 태그 내에 이벤트가 발생할 때 처리하는 코드를 등록하는 리스너 속성이 있다
	이 속성에 자바스크립트 코드를 작성할 수 있다

2) <script></script> 내에 작성
	<head></head>, <body></body>, body 태그 밖에 등 어디서든 작성할 수 있다
	웹페이지 내에서 여러번 작성도 가능하다
	
3) 자바스크립트 파일에 작성
	.js 확장자를 가진 별도의 ㅎ파일로 작성 후 저장하고
	html내에서는 <script src="파일경로"></script>를 통해 불러서 사용할 수 있다

4) url 부분에 작성
	<a>태그의 href 속성 등에서 자바 스크립트 코드를 작성할 수 있다
	href 속성에서 자바스크립트 코드를 쓸 때는 javascript 라는 키워드를 작성해야한다

4. 자바스크립트 기본 문법
1) 실행문 
	실행문은 ;(세미콜론)으로 구분한다
	대소문자를 구분한다
	
2) 출력
	console.log();

3) 자바스크립트 식별자(이름)
	식별자(identifier) : 어떤 값을 구별해서 식별할 수 있는 고유한 이름
		변수, 상수, 함수에 붙이는 이름
	첫번째 문자 : 알파벳, 언더바, $ 문자만 사용 가능
	두번째 이상문자 : 알파벳, 언더바, 0-9, $ 사용 가능
	대소문자 구분 : date, Date, dAtA 는 모두 다른 식별자
	키워드 사용 불가

4) 문장 구분
	세미콜론으로 문장과 문장을 구분한다
	한 줄에 한 문장만 있는 경우 세미콜론을 생략할 수 있다
	ex)	i = i + 1
		j = j + 1;
		x = x + 1; y = y + 1;
		p = p + 1 q = q + 1 (x)
	
5) 주석
	단축키 : ctrl + /
	
	java 주석
		한줄주석 //
		범위주석 /* */
		api주석 /** */
	sql 주석 --
	HTML주석 <!-- -->
	CSS주석 /* */
	JS주석
		한줄주석 //
		범위주석 /* */

6) 데이터 타입(Data Type)
	java 데이터 타입 : byte, short, int, long, double, float, char, boolean, string, 자료형[], 자료형[][], 클래스타입
	dbms 데이터 타입 : number(p, s), char, varchar2, date, timestamp

- 원시타입
	숫자타입(number) : 정수, 실수 구분없이 숫자타입
		Infinity(무한), NaN(Not a Number 숫자가 아니어서 연산불가) 특별한 값도 포함
	
		자바 : int, long, double, float
		오라클 : number

	논리타입(boolean) : 참, 거짓 값을 나타내는 논리형 타입
		true, false
	
		자바 : boolean(true, false)
		오라클 : x(number(1), number(0))
	
	문자열 타입(string) : 문자열을 나타낼 때 "", '', ``(백틱)을 사용한다
		ex)"안녕", '안녕', `안녕`

		자바 : String (""로만 사용가능)
		오라클 : varchar2, char (''로 사용가능)

	ubdefined : 타입이 정해지지 않은 것을 의미한다
		ex) undefined 값만 존재한다
	
	null 	: 값이 정해지지 않은 값이다, 의도적으로 값이 없음을 의미하는 값이다
		ex) null 값만 존재한다
		
	symbol : 고유하고 변경 불가능한 값을 생성하는 타입, 주로 객체의 속성키로 사용한다
	
- 객체타입
	자바스크립트는 여러 언어의 영향을 받았다
	명령형, 함수형, 객체 지향형을 지원하는 멀티 패러다임 프로그래밍 언어이다
	자바스크립트를 구성하는 거의 모든 것이 객체이다

	object : 객체 타입 키-값 쌍으로 이루어진 구조
	array : 순서가 있는 값들의 목록
	function : 코드블록을 정의하고 호출할 수 있는 객체

5. 변수
	하나의 값을 저장하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 불리는 이름
	(값의 위치를 가리키는 상징적인 이름)

0) java에서 변수선언
	자료형 변수명;
	변수명 = 값;

	자료형 변수명 = 값;

	final 자료형 상수명 = 값;

1) javascript에서 변수/상수 선언
	var 변수명 = 값;
	let 변수명 = 값;
	const 상수명 = 값;

+) var와 let 차이
	var는 ES6이전에 주로 사용하던 변수 선언 키워드, 함수 스코프를 가진다
	var로 선언된 변수가 함수 내에서만 지역변수로 작동하고 함수 외부에서는 전역변수로 작동된다

	let, const는 ES6에서 도입된 변수 선언 키워드, 블록 스코프를 가진다
	let, const 키워드로 선언된 변수가 {}중괄호로 둘러싸인 블록 내에서만 유효하다는 것을 의미한다

+) var 키워드 단점
	var 키워드를 사용하여 만든 변수는 함수 레벨 스코프를 지원한다는 것이다
	그러므로 변수를 선언할 때 let 키워드를 사용하는 것을 권장한다

var	
	함수 레벨 스코프 : 변수가 만들어진 함수 영역의 전체에서 유효함
			함수 내 어디서든 접근 가능
	재선언 가능 : 같은 스코프 내에서 동일한 변수 이름을 여러번 선언가능
	초기화 전 접근 가능 : 변수가 선언되기 전에 접근하면 undefined 값을 가짐

let			
	블록 레벨 스코프 : 변수가 만들어진 {} 영역에서만 유효함
			중괄호 내에서만 접근 가능
	재선언 불가능 : 같은 스코프 내에서 동일한 변수 이름을 다시 선언할 수 없음
	초기화 전 접근 불가능 : 변수가 선언되기 전에 접근하면 참조에러(Reference Error)가 발생함

+) 일시적 사각지대(TDZ Temporal Dead Zone)
 	let, const로 선언된 변수는 선언과 동시에 접근이 불가능한 구간(TDZ)에 놓임
	따라서 let, const로 선언된 변수는 초기화 전 접근이 불가능함!(ReferenceError)

	var로 선언된 변수는 호이스팅 + undefined 초기화되므로 에러가 발생하지 않음
	따라서 var로 선언된 변수는 초기화 전 접근이 가능함(단, 타입은 undefined)

6. 형변환
	타입 확인하는 연산자 : typeof x
	타입 확인하는 함수 : typeof(x)

	함수와 연산자에 전달되는 값은 자동 형변환
	수학 관련 연산자가 전달받은 값은 숫자타입으로 자동 형변환
	alert() 전달받은 값은 해당 값의 자료형과 상관없이 문자열로 자동 형변환

- 문자형 변환
	alert(value) //value는 문자형이어야한다
	// value가 문자형이 아닌 숫자타입이나 논리타입 등 다른 자료형의 값을 전달받으면 자동으로 문자형으로 변환된다
	String(value) // String() 함수를 호출해 전달받은 값을 문자열로 변환 가능

	java에서 문자열로 형변환 -> 다른 타입의 값 + ""

- 숫자형 변환
	alert("6"/"3") // 결과는 2 문자열이 숫자형으로 자동 변환된 후 연산이 수행된다
	Number(value)	// Number() 함수를 호출해 전달받은 값을 숫자형으로 명시하여 변환 가능

- 불린형 변환
	Boolean(value)
	// 숫자 0, 빈문자열 "", null, undefined, NaN => false
	// 비어있는 값을 제외한 모든 값(Truty) 결과는 true

7. alert(), confirm(), prompt()
	웹 페이지에서 사용자와 상호작용하기 위해 사용되는 간단한 대화상자를 만드는 함수
	- alert() : 단순한 정보를 사용자에게 표시하기 위해 사용된다
		사용자가 확인 버튼을 클릭하기 전까지는 아무런 작업도 할 수 없다
	- confirm() : 사용자에게 "예" or "아니오" 선택지를 제공하는 대화상자
		사용자가 선택을 하고 나면 해당 선택에 따라 다른 작업을 수행할 수 있다
	- prompt() : 사용자에게 입력받을 수 있는 칸을 제공하는 대화상자
		사용자가 입력할 수 있는 칸이 있고 "확인" or "취소" 선택지가 존재하여 선택에 따른 다른 작업을 수행할 수 있다

8. 연산자(Operator)

1) 최우선 연산자
	자바와 동일

2) 단항 연산자
	자바와 동일
	연산자를 기준으로 피 연산자(항1개)가 1개 인 것을 의미

	++, --
	+, -
	!

3) 이항 연산자 
	연산자를 기준으로 피연산자(항2개)가 2개 인 것을 의미
	
- 산술 연산자(+, -, *, /, &)
	자바와 동일
	+ 문자와 문자 연결, 문자와 숫자 연결, 숫자와 숫자와 문자 숫자끼리 연산 문자열 연결, 숫자와 숫자 연산

- 할당 연산자
	자바와 동일
	+=, -=, *=, /=. %/

- 쉬프트 연산자
	자바와 동일
	<<, >>, ~
	피연산자 >> 비트수 : 피연산자를 명시한 비트수만큼 이동시킨다
	
- 관계연산자
	자바와 동일
	>, <, >=, <=
	
	==	동등 비교 연산자, 값만 같은지
	=== 	일치 비교 연산자. 값과 타입이 같은지
	'1' == 1		true
	'1' === 1		false

	!=	부등 비교 연산자, 값만 다른지
	!== 	불일치 비교 연산자, 값과 타입이 다른지

- 논리연산자
	|| 논리합(or)	둘 중 하나라도 true면 true
		조건식 || 값 사용되어있을 경우 조건식의 값이 false일 때 뒤의 값이 출력된다
	&& 논리곱(and)	둘 다 true면 true
		선행 조건식이 true면 뒤에 있는 값이 실행된다
		선행 조건식이 false면 뒤에 있는 문장을 실행하지 않는다(성능을 위해서)
	부정(not) !true일 때 false, !false일 때 true
	?? 병합 연산자	null 또는 undefined인 경우에만 오른쪽 값을 반환한다
	?. 옵셔널 체이닝(Optional Chanining)
		객체에서 undefibed나 null에 접근할 경우 에러가 발생한다
		안전하게 객체의 프로퍼티에 접근하기 위해서 사용한다

- 대입연산자
	자바와 동일
	= 
9. 제어문
	자바와 동일

1) 조건문
	if문 -> 관계연산자로 조건 비교할 때
	switch문 -> 하나의 변수에 여러 값이 담길 수 있을 때
	
2) 반복문
	for문 -> 반복횟수나 범위를 알 때
	while문 -> 반복 횟수를 알지 못할 때, 조건이 주어졌을 때
	do~while문 -> 무조건 한 번 실행한 뒤 조건에 따라 반복할 떄

3) 기타 제어문
	break문 -> 강제탈출(반복문), switch문에서 case마다 종료할 때
	countinue문 -> 다음 반복으로 넘어갈 때

10. 문자열 사용하기
	문자열값을 다른 값과 함께 표현하는 방법
	- 문자열 연결을 이용한다
	- 템플릿 문자열을 이용한다(백틱사용)
	
	let name = "홍길동";
	console.log("제 이름은 " + name + "입니다");
	console.log(`제 이름은 ${name}입니다`);

11. 프로그래밍 패러다임
	패러다임은 소프트웨어 개발자가 문제를 해결할 떄 어떤 사고방식과 접근법으로 코드를 작성할 지를 결정하는 방법
	개발 방법론에도 영향을 준다

1) 프로그래밍 패러다임의 종류
- 명령형 프로그래밍(Imperative)
	어떻게(How) 해결할 것인지를 순서대로 명령하는 방식
	상태 변경과 실행 흐름을 중시함

	* 절차지향 프로그래밍
	- 명령을 순차적으로 처리
	- 컴퓨터 작동방식과 유사
	- 처리속도 빠름
	- 유지보수 어려움(대규모 프로젝트에 비효율적)
	ex) C, COBOL, Fortran

	* 객체지향 프로그래밍(OOP)
	- 객체간의 상호작용 중심
	- 다향성, 추상화, 캡슐화, 상속 등의 개념
	- 재사용성, 유지보수성 우수
	- 복잡한 시스템 모델링에 강함
	ex) Java, Python, C++
	

- 선언형 프로그래밍(Declarative)
	무엇(What)을 할지만 명시하고 어떻게 실행될지는 신경쓰지 않음
	상태 변화 최소화

	* 함수형 프로그래밍(FP)
	- 순수함수(Pure Function) : 입력 -> 출력, 부작용 없음
	- 불변성(Immutability) 유지
	- 디버깅, 테스트 용이, 재사용성 우수
	ex) Haskell, Javascript(일부 지원)
	
2) 소프트웨어 개발 방법론
	개발을 구조화된 방식으로 효율적으로 수행하기 위한 체계적인 접근법
	
	방법론		특징				장점				단점
	폭포수모델		단계별진행, 문서기반			이해하기쉬움, 문서화 잘됨		변경에 비유연
	애자일		반복적 개발, 고객 피드백 중시		유연성, 빠른 피드백			계획 미흡 시 혼란 가능
	나선형모델		반복 + 리스크 관리			위험감소, 점진적 개선			복잡한 관리, 비용 증가 가능
	RAD		빠른 프로토타이핑. 요구사항반영빠름 	속도 빠름, 고객 의견 반영 용이		품질저하, 대형프로젝트에 부적함
	V-모델		개발과 테스트 병렬 수행		품질 보장, 결함 조기 발견		테스트 비용 높고 유연성 부족
	XP(익스트림)	테스트 주도개발(TDD), 지속적통합	코드 품질 향상, 신속반영		팀 역량/협업에 의존, 집중 필요

3) 개발방법론 선택 기준
	프로젝트 크기 : 소규모 RAD, XP
	유연성 필요 여부 : 요구사항이 자주 바뀐다면 애자일
	품질 요구 : 높은 품질을 요구한다면 V-모델, XP
   	시간 : 빠른 결과물 필요 RAD
   	리스크 : 리스크가 크다면 나선형 모델
   
























































