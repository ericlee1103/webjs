day33(js 4일차)
복습 -> 팝업창과 모달창 -> defer, async -> java 쓰레드

0. 복습
1) DOM 트리
   웹 문서의 구조와 정보들을 트리 형태로 저장한다
   DOM 트리를 구성하는 하나하나 요소를 노드라고 하고 
   최상위노드를 root 노드(document 노드)
   각 노드들은 위치에 따라 부모, 자식, 형제, 조상노드라고 한다
   태그노드, 속성노드, 텍스트노드 등이 있다

2) DOM(Document Object Model)
   html 태그들을 하나씩 객체화 한 것을 의미한다

3) DOM Selector 종류
- HTMLCollection 반환하는 메소드 : 실시간(live) 컬렉션
   document.getElementById('id')         단일 요소 반환(HTML 요소 1개)
   document.getElementsByClassName('클래스명')   같은 클래스명을 가진 요소들 반환(HTMLCollection)
   document.getElementsByTagName('tag명')      태그이름으로 요소들 반환(HTMLCollection)

- NodeList 반환하는 메소드 : 정적(static)리스트(단, Node.childNodes는 예외적으로 live일 수 있음)
   document.getElementsByName('name명')      name 속성으로 요소들 선택(NodeList)
   document.querySelector('css선택자')      첫번째 일치하는 요소만 반환(element)
   document.querySelectorAll('css선택자')      모든 일치하는 요소들 반환(NodeList)
   
   HTMLCollection      NodeList
반복가능   for, for ... of      for, for ... of, forEach
실시간   실시간반영됨      실시간반영되지않음


   HTMLCollection.prototype.forEach = Array.prototype.forEach

4) 요소 내용 가져오기, 수정하기
- 요소.innerHtml
- 요소.innerText

5) 요소 속성 가져오기, 수정하기, 삭제하기
- 요소.getAttribute('속성명')
- 요소.setAttribute('속성명', '값')
- 요소.removeAttribute('속성명')

6) DOM을 활용한 이벤트처리
- DOM 요소에 이벤트 핸들러 직접 연결시키기
	요소.on이벤트명 = 함수;

- addEventListener()메소드 사용하기
   요소.addEventListener(이벤트, 함수);

1. 팝업창과 모달창
1) 팝업창
	현재 페이지에 새로운 브라우저 창을 열어주는 것
	브라우저 설정에 따라 팝업창을 막아두는 경우가 있다
	최근엔 사용 빈도가 급격히 떨어졌다
	
2) 모달창
	라이트박스를 하나의 팝업창처럼 사용한다
	팝업창과 비교했을 때 실제 브라우저 창이 아니라 새로운 레이어를 띄워준다는 차이가 있다

2. defer, async
   웹 브라우저에서 돌아가는 스크립트는 대부분 HTML보다 무겁다
   용량이 커서 다운로드 받을 때도 오랜 시간이 걸리고 처리할 때도 오래 걸린다
   
   브라우저는 HTML을 읽다가 <script></script> 태그를 만나면 스크립트를 먼저 실행해야하므로 DOM생성을 멈춘다
   src 속성이 있는 외부 스크립트가 적용되어도 동일하다

   - 스크립트에서는 스크립트 아래에 있는 DOM요소에 접근할 수 없다
     DOM요소에 이벤트 핸들러를 추가하는 등의 사용이 불가능하다
   - 페이지 위쪽에 용량이 큰 스크립트가 있는 경우 스크립트가 페이지를 막아버린다
     페이지에 접속하는 사용자들은 스크립트를 다운받고 실행할 때 스크립트 아래쪽에 있는 페이지를 볼 수 없다

1) defer
   defer 속성이 있는 스크립트를 백그라운드에서 다운로드 한다
   지연 스크립트를 다운로드 하는 도중에도 HTML 파싱이 멈추지 않고 defer 스크립트 실행은 페이지 구성을 끝낼때까지 지연된다
   - 지연 스크립트는 페이지 생성을 절대 막지 않는다
   - 지연 스크립트는 DOM에 준비된 후에 실행되긴 하지만 DOMConentLoaded 이벤트 발생전에 실행된다
   ※ defer 속성은 외부 스크립에만 유효하다
   <script defer src="스크립트파일경로"></script>
   src 속성이 없으면 무시된다

2) async(비동기 스크립트)
   페이지와 완전히 독립적으로 동작한다

   - 백그라운드에서 다운로드된다
     html 페이지는 async 스크립트 다운이 완료되기를 기다리지 않고 페이지 내 콘텐츠를 처리하고 출력한다
     (async 스크립트 실행중에는 HTML 파싱이 멈춘다)
   - DOMContentLoaded이벤트와 async 스크립트는 서로를 기다리지 않는다
     페이지 구성이 끝난 후에 async 스크립트 다운로딩이 끝난 경우 
     DOMContentLoaded는 async 스크립트 실행 전에 발생할 수 있다
   
+) 왜 defer와 async가 필요한가?
	브라우저가 <script>태그를 만나면 스크립트를 먼저 다운받고 실행도 먼저하게 됨
	이 때 HTML 파싱은 중단됨 -> 사용자 경험 저하(페이지가 늦게 보여짐) 성능저하
	HTML 렌더링을 막지 않도록 도와주는 속성이 defer와, async이고 반드시 사용해야한다

4) defer와 async의 특징
- defer
	html파싱과 동시에 백그라운드에서 다운로드
	HTML 파싱 완료 후, DOMContentLoaded 직전에 실행
	문서에 선언된 순서대로 실행 순서 보장됨
	HTML 파싱은 절대 멈추지 않음
	사용 : DOM요소에 이벤트 핸들러를 추가하거나 여러개의 스크립트를 순서대로 실행해야 할 때

- async
	HTML 파싱과 동시에 백그라운드에서 다운로드
	다운로드 완료 즉시 실행(HTML 파싱이 멈춤)
	먼저 다운된게 먼저 실행되기 때문에 실행 순서는 보장되지 않음
	HTML 파싱은 실행 순간만 멈춤
	사용 : 스크립트가 페이지 구성과 무관할 때(광고, 통계 등)
	
+) 기본 스크립트
	HTML 파싱이 진행 -> 멈췄다가 스크립트 다운로드 -> 스크립트 실행 -> HTML 파싱 재진행

- defer
	HTML 파싱이 진행 중 -> 스크립트 다운로드 -> 스크립트 실행 모두 DOM생성 후 실행

- async 
	HTML 파싱이 진행 중 -> 스크립트 다운로드 -> 먼저 다운로드 된 즉시 실행(HTML 파싱 잠시멈춤) -> HTML 파싱

프로젝트 진행 방향
	기획(주제와 일치되는 래퍼런스 사이트 찾기 3개 선정) -> 최종 1개 선정 + 화면(피그마 -> 화면그리기)
	어떤 서비스를 강점으로 할 지(주된 서비스 2개, 보조 서비스 3개)
	
	화면 그리기(피그마)
	퍼블리싱(hrml, css, js) 	프론트
	DB( 모델링, 정규화, ERD)	백엔드
	백단 작업(JSP)		백엔드

































































